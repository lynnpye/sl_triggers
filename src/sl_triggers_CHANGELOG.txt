122
    enhancement: New Core event trigger "OnCellChange"
        new standard modevent: OnSLTRPlayerCellChange
    enhancement: New Core event trigger "OnPlayerLoadingScreen"
    enhancement: New Core event trigger "OnPlayerContainerActivate" (i.e. opening containers/bodies)
        new standard modevent: OnSLTRPlayerActivateContainer
    enhancement: new $system variables
    enhancement: Additional scopes, $core, $sexlab, with new custom variables (should make certain queries simpler)
    enhancement: Improved script parsing speed
    enhancement: Improved variable resolution speed

121
    Savegame compatibility: NEW SAVE REQUIRED
    enhancement: stability - this version has been worked over considerably to improve the stability of the callstack mechanism and properly support load-resume mechanics
        this should make it easier to write long-running scripts, even those intended to run for the duration of the game
    enhancement: variable scopes "system", "target" and "thread" added in addition to the existing "local" and "global" scopes
        "system" scope - special scope that will now hold previous "special variables" (i.e. $player is now $system.player, $self is now $system.self)
        "target" scope - per Actor/target (i.e. myvar on the Player is distinct from myvar on Hod)
        "thread" scope - these variables are available per individual call chain
    enhancement: string interpolation
        Previously:
            msg_notify "Part1 "  $somevar  " part 2 (did you remember your spaces?) " $global.someothervar
        Now you can:
            msg_notify $"Part1 {somevar} part 2 (did you remember your spaces?) {global.someothervar}"
    enhancement: error messages related to scripts should be better tied to actual line numbers (and not opcode offsets)
    BREAKING CHANGES:
    change: variable naming syntax is now:
            $[<optional-scope>.]<varname>
        where <optional-scope> can be any of "local", "thread", "target", "global", or "system"
        if not specified, defaults to "local"
    change: variable names MUST be bare to be resolved
        Previously:
            set "$myvar" 5 ; this used to be valid
            set $myvar 5   ; and both did the same thing
        Now:
            set $myvar 5   ; this is valid
            set "$myvar" 5 ; this will FAIL
    change: new string-literal syntax for variable interpolation
        Prefixing a string literal with $ will attempt variable interpolation on any items enclosed in curly braces '{}', treating them like a variable name, including scope
            $"local: {var}  the same local var, but explicit: {local.var}  completely different var due to scope: {thread.var}"
    change: numeric values will be assumed to be base 10 unless prefixed with "0x"
        Previously:
            23 != 023
            ; 0x23 wasn't even valid notation
            023 == 0x23
        Now:
            23 == 023 == 00000023 == 0x17 == 0x00000017
            023 != 0x23
            017 != 0x17
        

120
    Savegame compatibility: tested succesfully with an update from v119
    bugfix: callstack corruption could occur in some scenarios; fixed
    bugfix: BUG IN THE REGRESSION TEST! yuck
    bugfix: parser will no longer assume "!=" is a global variable named "="
    bugfix: PARTIAL: strings starting with "$" will now work IF THEY HAVE A SPACE IN THEM. quirk of the whole "variables start with $, everything is a string, resolve all the things!" design
        workaround: if you need a string with no spaces that starts with a "$"... you can can use 'cat $food "$" "therestofthestring"'; ugly, I know, needs some thinking
    enhancement: added additional equality operator, "==" because I got tired of my brain trying to stop me from not typing it
    enhancement: you should be able to safely mix "==", "=", and "&=" (as well as, on the opposite side, "!=" and "&!=")
        if the two values "can be" evaluated as numbers for equality, they will be, otherwise it will perform string equality
    enhancement: sl_triggers_internal.SafeSmartEquals(string, string) is the native logic wrapper (mostly for speed)
    enhancement: "set <variable> resultfrom <function.....>"
        example:
            set $actorName resultfrom actor_name $player
        it's what we all do anyway

119
    Savegame compatibility: tested succesfully with an update from v118
    enhancement: added the vast majority of bindings for Actor, ObjectReference, and Form under the following functions
        actor_doaction, objectreference_doaction, form_doaction
        actor_dogetter, objectreference_dogetter, form_dogetter
        actor_doconsumer, objectreference_doconsumer, form_doconsumer
        actor_dofunction, objectreference_dofunction, form_dofunction
            These are ust wrappers around the Papyrus script functions. Check the UESP CK wiki links I included for API usage
            These use the typical "sub-function" approach
            action - functions that take no parameters and return no results
            getter - functions that take no parameters and return a result
            consumer - functions that take parameters and return no results
            function - functions that take parameters and return a result
            When a function returns a "Form" type, it returns a FormID
            For function parameters that require a "Form" type, they will accept not only the typical "modname.esp:00234" format but also raw int values returned by these functions

118
    Savegame compatibility: tested succesfully with an update from v117
    Savegame compatibility: SCRIPT-BREAKING if using the old "$g" style global variable names
        Shipped scripts in the 'sl_triggers/commands' subfolder have been updated
    MAJOR enhancement: variable names, i.e. not just numbers
        $<any-non-breaking-characters> - local variables
        !<any-non-breaking-characters> - global variables
        Yes, this means that any existing scripts you have written that make use of the previous "$g" global variable approach is now actually referencing local variables
    bugfix: SLT.actor_say not working if self is player

117
    Savegame compatibility: tested succesfully with an update from v116
    MAJOR enhancement: running scripts should now resume on loading a save (you can have suuuuuper long-running scripts now; theoretically lifetime)
    MAJOR enhancement: new Core event: OnNewSession (fires at the start of a new game and each time you load a save; provides a unique sessionId for each session)
    enhancement: new modevent published ("_slt_event_slt_on_new_session_"), fires at the start of a new session (i.e. at start of new game and after each save load)
    enhancement: added function in API to retrieve the event name
    enhancement: actor_getscale/actor_setscale
    bugfix: Top of the Hour events were not respecting Chance
    bugfix: sl_triggersAPI.psc.headeronly not valid
    change: removed the roughly 4 second (technically 3.9 second) additional delay and have sacked the ones responsible for it

116
    Savegame compatibility: tested succesfully with an update from v115
    enhancement: added jsonutil and storageutil functions as wrappers around PapyrusUtil scripts of the same name
    enhancement: minor performance tuning (restructured sequence of certain built-in lookups)
    enhancement: more documentation, both on the wiki and in .txt file form with the mod
    enhancement: added osla_* functions as wrappers around OSLAroused_ModInterface
    enhancement: added slso_bonus_enjoyment function

115
    Savegame compatibility: tested succesfully with an update from v114 (install 114, new game, verify, save, update to 115, load, verify)
    bugfix: Core function library (toh_elapsed_time only) was looking for the extension with the wrong formID
    bugfix: corrected several functions with edge case failures to set $$ appropriately
    bugfix: several logic bugfixes while going through the function libraries
    enhancement: completed the addition of argument checking for all operations/functions
    enhancement: actor_isaffectedby now can match for ALL (see updated documentation)
    enhancement: several sl_ functions did not take an actor; an actor has been added as an optional param (e.g. sl_animname)
    enhancement: added protective checks around param index access and object referencing
    change: added roughly 4 second (technically 3.9 second) additional delay on SLT start before trying to register extensions to improve startup sync

114
    enhancement: performance improvements centered around speeding up the command library access
    enhancement: improved error reporting for your scripts (see the console for errors in your scripts; feature developing)
    bugfix: inc no longer coerces to float; will keep it an int if it finds an int
    enhancement: improved performance for 'set'/'inc'/'cat' (should never have been part of the command library; moved to built-in functionality; much faster)
    enhancement: documentation is available again with the .zip (sl_triggers_function_library.txt); now being generated from source, as well as the wiki content (should be essentially identical)

113
    Savegame safe with v112
    bugfix: Soft Delete is now actually respected by extensions and soft deleted triggers should no longer fire; the extensions have been reprimanded and a PIP put into place
    feature: FULLY DELETE is now an option for Soft Deleted triggers (originally the intent was to require manual deletion from the filesystem)
    feature: added compatibility files for ConsoleUtil Extended for improved console command implementation

112
    PROBABLY-SAVE-BREAKING: Reuse a save at your own risk. :)
    bugfixes: yes, plural. just... take a look at the last few commits if you are curious
        but at this point I have a test script that runs through several of the major components for regression testing and it's working
        Suffice to say I've reached a happy equilibrium with what I wanted vis-a-vis extensibility and performance

111
    PROBABLY-SAVE-BREAKING: cleaning up last bits of extension pools (should have done this pre 109); this changes the .esp, so I suspect you will need a new save (I mean, you can try)
    enhancement: added new ModEvent that SLT listens for
        sl_triggers_SLTRequestList
            AFormObject.SendModEvent("sl_triggers_SLTRequestList", "StorageUtilKey", (optional) 1.7 (yes, 1.7))
            - when received, will populate a StorageUtil string list located at "StorageUtilKey" with the list of scripts
            - the list will be attached to the Form sender
            - if you specify 1.7 for the float value, the StorageUtilKey will be assumed to be a global value (i.e. not stored to the Form)
            - if you put a mod event name into the first element of the list before invoking this event, that mod event will be fired when the list is populated
    bugfix: the 'TopOfTheHour' layout was set to use the 'Keymapping' layout via a lovely little typo
    change: shipped script cleanup
        - recoded all .json shipped scripts as .ini
        - reformatted some of the .ini files to pretty them up a little
        - removed a few scripts referencing objects no longer shipped with the .esp
        - NOTE: IF YOU ARE UPGRADING, YOU WILL HAVE A BUNCH OF DUPLICATE SCRITPS IN YOUR (for legacy purposes, incorrectly named) 'Data\SKSE\Plugins\sl_triggers\commands\' folder,
            because you already have the old .json versions I removed and will receive new .ini versions. Unless you have a preference for the .json versions, I would
            recommend you clean out your commands folder prior to updating.

110
    bugfix: fixed the problem preventing command libraries beyond the base SLT library from working
    enhancement: added a demo script and some convenience options for other mod authors

109
    enhancement: dynamic command library lookup
        this is going to be geared more toward extension authors but essentially this will make it TONS easier to add functions you can call in your scripts
    bugfix: SexLab events should be working now
        the code to read the commands was copied from the previous attributes which were int and not string, replacing it with a getstring fixed this issue
    bugfix: Chance not saving for new SexLab events
        the chance attribute was not being set due to a bug in the UI handler for sliders, fixed;

108
    enhancement: added sl_triggersAPI for other mod authors to access SLT features
        sl_triggersAPI exposes the following endpoints:
            GetVersion()
            GetScriptsList()
            RunScript(string _scriptname, Actor _actor = none) ; defaults to Player
                if RunScript() is called without an Actor provided
                    it will first try the Actor currently in your crosshairs if there is one
                    it will fall back to the Player

    enhancement: added console commands (slt/sl_triggers)
        slt console command has the following usage:
			Usage: slt version          ; displays sl_triggers mod version
			Usage: slt list             ; lists the scripts available to run from SLT
			Usage: slt run <scriptname> ; where <scriptname> is a valid script for SLT
                when slt run is called
                    it will first check if there is an Actor currently selected in the console
                    it will then check for an Actor in the crosshairs
                    it will fall back to the Player

107
    enhancement: new commands for your scripts:
            dd_unlockslot <slot#> <"force" (optional)> ; slot# i.e. 32 is body ; if "force" is added as a second parameter, it will also unlock quest items
            dd_unlockall <"force" (optional)> ; works like dd_unlockslot but for all slots
        Note that after unlocking items may still appear to be equipped in inventory but you should be able to safely select and remove them
        And a script to demonstrate
            DD Unlock All.ini
    enhancement: .ini scripts now support comment to end of line
        sl_isin $self ; this is a valid comment
        ; as would be this (all by itself)
    

106
    enhancement: flagged as .ESL
    bugfix: workaround for Papyrus VM string case destruction
    enhancement: added Devious Followers Redux commands
            df_setdebt
            df_resetall
        additionally, I also added scripts:
            DF Set Debt to 0.ini
            DF Reset All.ini

105
    bugfix: possible resolution issue with global variables in some cases
    enhancement: new feature, subroutines
        beginsub <subroutinename>/endsub to demarcate the subroutine
        gosub <subroutinename> to execute and return
    enhancement: new feature, "call"
        call <command file name> <optional $1 argument> <optional $2 argument> ...
            stops execution of current command file, runs the requested file, then resumes current command file
            if an extension is not specified .ini is tried first, then .json
            variable scopes are NOT shared (global variables are, of course, still global)
                so if you set $1, then call a function, it will not see your $1 value
                but if you use $g1, it will
            arguments are passed by value
        callarg <index> <variable name>
            Example: callarg 0 $2
            this will place the first (index 0) argument passed into $2
            

104
    multiple bugfixes related to MCM and settings management
    new file layout under the hood

103
    bugfix: trigger primes were not dispelling themselves at end of service
    bugfix: result stacks were not crossing back from extensions to core

102
    bugfix: fixed problem where available triggers would not reset between launches of the game
    bugfix: fixed problem with MCM OID handling (might not have noticed it; it could be subtle)
    enhancement: QoL for your developer; lots of code clean up and trying to fix problems I introduced due to code clean up
        .. like, a LOT of code cleanup. Refactoring. Removing comments. Adding comments.
    enhancement: Added localization. sl_triggers doesn't have much to translate, but if you want to donate translations I'll add them

101
    bugfix: sexlab compat
    enhancement: sl_orgasm

100
    beta: the new hotness is all about modularity... I really need to write this up

21
	bugfix: position is now being handled correctly by the MCM (it was overwriting the "role" attribute)

20
	bugfix: Chance works again

19
	enhancement: new operation
		- sl_isinslot - is the specified actor in the specified slot of a SexLab scene (I accidentally implemented this and kept it)
			["sl_isinslot", "$self", "1"]
				$$ == "1" if true; "0" otherwise
	enhancement: new trigger criteria: is_position (is the actor in the indicated slot; what I was asked for)
	enhancement: setting events back to "Select an Event" clears out the event, helping keep your settings.json cleaner
	bugfix: Main no longer skipping most of the checks due to my switch to int conversion and not paying attention to !
	bugfix: SexLab event handling no longer goes into an infinite loop (present since v16)
	change: brought in "whatsnew" to consolidate change history

18
	enhancement: new operations
		- sl_advance
			["sl_advance"] (go forward) OR ["sl_advance", "-1"] (go backward)
		- actor_isaffectedby
			["actor_isaffectedby", "Skyrim.esm:1030541"] (actor is affected by FortifyHealthFFSelf (i.e. Potion of Health), $$ == "1")

17
	enhancement: removed SexLab hard dependency; you can now enjoy your sl(shhh)_triggers on your more vanilla Skyrim experiences
		existing functions should gracefully degrade or give best accurate answer (i.e. gender coming from base actor instead of sexlab if not available)
	enhancement: MCM Main page now displays SexLab status
	bugfix: fixed a bug in the MCM trigger cleanup code

16
	enhancement: added keymapping as an event; you can now bind keymappings to, as usual, up to 3 command files
		also allows for modifier use
		also allows for Dynamic Activation Key use per trigger
	enhancement: events will only be registered for if triggers exist that use them; if you do not hook any SexLab events, they will not be registered
		registration will update if you update the MCM
	change: lots of refactoring, technically some performance improvements but I haven't done timings so it's mostly my instinct, some general code cleanup (mostly due to mess of my own making)
	change: event id values (0 for SLStart...) are now 1 higher (1 for SLStart) to make the MCM behave more nicely; this should get converted automatically
	change: started adding some non-trigger values into settings.json, currently to track version; this is to help allow for settings updates in the future
	

15
	enhancement: improved "top of the hour" updategametime processing
	enhancement: variables can be any "$<non-negative-int>"
		["set", "$42", "life, the universe, and everything"]
		is now valid
	enhancement: global variables can be any "$g<non-negative-int>"
		["set", "$g42", "life, the universe, and everything"]
		is now valid
	fixed bug: fixed race condition when running multiple commands from one trigger
	change: renamed operation "actual_hours_since_last_top" to "toh_elapsed_time"
		"actual_hours_since_last_top" redirects to the new functionality for now
	

14
	split "if_race" into "if_race" and "if_player"
		you will likely need to update any triggers that relied on "if_race" previously
		existing "if_race" values will not be automatically updated and you will probably see:
			if you had...			then you will now have until you edit it...
			Player					Undead
			Not Player				Partner Humanoid
			Undead					Partner Creature
			Partner Humanoid		Partner Undead
			Partner Creature		??
			Partner Player			.. crabs??
			Partner Not Player		.. the void of space??
			Partner Undead			Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn.
			
		"if_race" now offers:
			Any
			Humanoid
			Creature
			Undead
			Partner Humanoid
			Partner Creature
			Partner Undead
			
		"if_player" offers:
			Any
			Player
			Not Player
			Partner Player
			Partner Not Player

13
	added event handling for "top of the hour" (i.e. on the 'o'clock for each in-game hour, with the player as $self)
	added "global" variables: "$g0" through "$g9"; accessible across scripts, retained across executions
	added new operations:
		actor_worninslot
		actor_wornhaskeyword
		actual_hours_since_last_top

v12:
    General:
        - Form ID for objects can now be in dex or hex notation. If ID starts with 0, it is assumed to be hex, else its dec
        - Example:
        -     Hex version:
        -     ["item_equip", "$self", "skyrim.esm:0166d6", "0", "1"],
        -     Dec version:
        -     ["item_equip", "$self", "skyrim.esm:91862", "0", "1"],
        - I hope I didn't broke something :(
        
    Functions: 
        - actor_race: get actors race name. Vannila(Nord, Bretonr, etc) or SL "RaceKey" (Dogs, Trolls, etc)
        - math: math fuctions: asint, floor, ceiling, abs

v11: 
    Functions:
        - av_set: set actor value
        - av_getbase: get actor base value
        - actor_advskill: player only, advance actor skill
        - "$partner2", "$partner3", "$partner4": to get 2nd, 3rd and 4th "partner"
        
        
v10:
    General:
        - increased max number of goto labels to 32
        
    Functions:
        - item_equip: equip item. Like item_equipex. item_equip is "vannila" function, item_equipex is SKSE version
        - actor_state: get or set/exec a couple of misc functions, "states" about actor
        - actor_body: a couple of functions related to actors body (weight, head regen, stuff)
        - weather_state: get what kind of weather is currently active (rain, show, etc...)
        - util_game: some functions from game.psc. IncrementStat, QueryStat
        
v09: 
    Functions:
        - sl_animname: returns current SL animation name
        - util_waitforkbd: wait for user to press a specific key or SL animation ends
        - json_getvalue: read data from external json file
        - json_setvalue: write data to external file
        - json_save: while "save" is done automaticly when user makes skyrim save, this forces .json to be saved now
        
    Commands:
        - Time Control.json: You can control the game speed, and so animation speed with keyboard. (must have ConsoleUtilSSE plugin)
        
v08:
    Functions:
        - snd_play, snd_setvolume, snd_stop: for playing sound
        - console: (optional). If you have ConsoleUtilSSE installed (https://www.nexusmods.com/skyrimspecialedition/mods/24858), it executes console commands
        - mfg_*, facial expressions: (optional) If you have MfgFix (https://www.nexusmods.com/skyrimspecialedition/mods/11669), you can play with facial expressions
        
    Commands:
        - Heart beat(A).json: play "heart beat" sound 
        - Sound - levelup.json: play "levelup" sound
        - Time Slow.json: slows global time by 50%. Resets time to normal at the end. Uses console command (must have ConsoleUtilSSE plugin)
        - MFG Reset.json: When sex ends, reset facial expression (must have MfgFix plugin installed)

v07:
    Misc:
        - you can now set up to 80 triggers
        
    Functions:
        - actor_wornhaskeyword: check if anything actor is wearing has specified keyword
        - actor_lochaskeyword: check if location where actor is has a specific keyword
        
        
v06:
    Functions:
        - actor_sendmodevent: Actor version of util_sendmodevent
        - sl_hastag: check if current animation has a specific tag
        - util_getgametime: get game time
        - util_gethour: get day hour
        
    Commands:
        - Eat (sweets).json
        - It was bad.json

v05: 
    Variables:
        - "$partner" : partner in sex
        
    Variables operations:
        - "set" : has now 2 versions. Simple assignment and some math like ["set", "$1", "12", "+", "3"]  
        - "inc" : short version for "+"
        - "cat" : short version for string "+"
        
    Functions:
        - actor_isguard: is law
        - actor_isplayer: is PC
        - actor_getgender: gender
        - actor_haskeyword: does it have a specific kewyord
        - actor_getrelation: get relationship rank btween 2 actors (enemy, friend, ...)
        - actor_setrelation: set relationship rank btween 2 actors (enemy, friend, ...)
        - actor_infaction: check if actor is in specific faction
        - actor_getfactionrank: get faction rank
        - actor_setfactionrank: set faction rank
        - actor_removefaction: remove from faction
        - actor_playanim: play animation
        - util_sendmodevent: send event (SendModEvent)
        - util_sendevent: send event using SKSE (ModEvent.psc)