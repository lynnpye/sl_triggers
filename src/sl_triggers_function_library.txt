SLTriggers Redux Base Function Library


Actor:
==============

actor_advskill: Advance targeted actor's skill by specified amount. Only works on Player.
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: skill: skillname e.g. Alteration, Destruction
	- parameter 3: float: value: number

	Example
		actor_advskill $system.self Alteration 1

	Boost Alteration by 1 point
	Note: Currently only works on PC/Player

-=-

actor_body: Returns: (varies): Alters or queries information about the actor's body, based on sub-function
	- parameter 1: actor: target Actor
	- parameter 2: sub-function: sub-function
	- parameter 3: third argument: varies by sub-function

if parameter 2 is "ClearExtraArrows": clear extra arrows
if parameter 2 is "RegenerateHead": regenerate head
if parameter 2 is "GetWeight": get actors weight (0-100)
if parameter 2 is "SetWeight" (parameter 3: <float, weight>): set actors weight

	Example
		actor_body $system.self "SetWeight" 110

-=-

actor_display_name: Returns: string: the actor displayName

	Example
		actor_display_name $actor

-=-

actor_doaction: For the targeted Actor, perform the associated function based on the specified action
'Action' in this case specifically refers to functions that take no parameters and return no values
https://ck.uesp.net/wiki/Actor_Script
	- parameter 1: actor: target Actor
	- parameter 2: action: action name

ClearArrested
ClearExpressionOverride
ClearExtraArrows
ClearForcedLandingMarker
ClearKeepOffsetFromActor
ClearLookAt
DispelAllSpells
DrawWeapon
EndDeferredKill
EvaluatePackage
MakePlayerFriend
MoveToPackageLocation
RemoveFromAllFactions
ResetHealthAndLimbs
Resurrect
SendAssaultAlarm
SetPlayerResistingArrest
ShowBarterMenu
StartDeferredKill
StartSneaking
StopCombat
StopCombatAlarm
UnequipAll
UnlockOwnedDoorsInCell
;;;; will call objectreference_doaction if no matches are found

	Example
		actor_doaction $system.self StopCombat

-=-

actor_doconsumer: For the specified Actor, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/Actor_Script
	- parameter 1: actor: target Actor (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

AddPerk
AddToFaction
AllowBleedoutDialogue
AllowPCDialogue
AttachAshPile
DamageActorValue
DamageAV
DoCombatSpellApply
EnableAI
EquipItem
EquipShout
EquipSpell
ForceActorValue
ForceAV
KeepOffsetFromActor
Kill
KillEssential
KillSilent
ModActorValue
ModAV
ModFactionRank
OpenInventory
PlaySubGraphAnimation
RemoveFromFaction
RemovePerk
RestoreActorValue
RestoreAV
SendTrespassAlarm
SetActorValue
SetAlert
SetAllowFlying
SetAllowFlyingEx
SetAlpha
SetAttackActorOnSight
SetAV
SetBribed
SetCrimeFaction
SetCriticalStage
SetDoingFavor
SetDontMove
SetExpressionOverride
SetEyeTexture
SetFactionRank
SetForcedLandingMarker
SetGhost
SetHeadTracking
SetIntimidated
SetLookAt
SetNoBleedoutRecovery
SetNotShowOnStealthMeter
SetOutfit
SetPlayerControls
SetPlayerTeammate
SetRace
SetRelationshipRank
SetRestrained
SetSubGraphFloatVariable
SetUnconscious
SetVehicle
SetVoiceRecoveryTime
StartCannibal
StartCombat
StartVampireFeed
UnequipItem
UnequipItemSlot
UnequipShout
UnequipSpell
SendLycanthropyStateChanged
SendVampirismStateChanged
EquipItemEx
EquipItemById
UnequipItemEx
ChangeHeadPart
ReplaceHeadPart
UpdateWeight
;;;; will call objectreference_doconsumer if no matches are found

	Example
		; make the script target an ally of the player's
		actor_doconsumer $system.self SetRelationshipRank $system.player 3

-=-

actor_dofunction: For the targeted Actor, set $$ to the result of the specified Function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/Actor_Script
	- parameter 1: actor: target Actor  (accepts special variable names ($system.self, $system.player) and both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

AddShout
AddSpell
DispelSpell
GetActorValue
GetActorValuePercentage
GetAV
GetAVPercentage
GetBaseActorValue
GetBaseAV
GetEquippedItemType
GetFactionRank
GetFactionReaction
GetRelationshipRank
HasAssociation
HasFamilyRelationship
HasLOS
HasMagicEffect
HasMagicEffectWithKeyword
HasParentRelationship
HasPerk
HasSpell
IsDetectedBy
IsEquipped
IsHostileToActor
IsInFaction
PathToReference
PlayIdle
PlayIdleWithTarget
RemoveShout
RemoveSpell
TrapSoul
WornHasKeyword
GetActorValueMax
GetAVMax
GetEquippedItemId
GetEquippedSpell
GetEquippedWeapon
GetEquippedArmorInSlot
GetWornForm
GetEquippedObject
GetNthSpell
;;;; will call objectreference_dofunction if no matches are found

	Example
		; to get the target's base health
		set $selfBaseHealth resultfrom actor_dofunction $system.self GetBaseAV "Health"

-=-

actor_dogetter: For the targeted Actor, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/Actor_Script
	- parameter 1: actor: target Actor  (accepts special variable names ($system.self, $system.player) and both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

CanFlyHere
Dismount
GetActorBase
GetBribeAmount
GetCrimeFaction
GetCombatState
GetCombatTarget
GetCurrentPackage
GetDialogueTarget
GetEquippedShield
GetEquippedShout
GetFlyingState
GetForcedLandingMarker
GetGoldAmount
GetHighestRelationshipRank
GetKiller
GetLevel
GetLeveledActorBase
GetLightLevel
GetLowestRelationshipRank
GetNoBleedoutRecovery
GetPlayerControls
GetRace
GetSitState
GetSleepState
GetVoiceRecoveryTime
IsAlarmed
IsAlerted
IsAllowedToFly
IsArrested
IsArrestingTarget
IsBeingRidden
IsBleedingOut
IsBribed
IsChild
IsCommandedActor
IsDead
IsDoingFavor
IsEssential
IsFlying
IsGhost
IsGuard
IsInCombat
IsInKillMove
IsIntimidated
IsOnMount
IsPlayersLastRiddenHorse
IsPlayerTeammate
IsRunning
IsSneaking
IsSprinting
IsTrespassing
IsUnconscious
IsWeaponDrawn
GetSpellCount
IsAIEnabled
IsSwimming
WillIntimidateSucceed
IsOverEncumbered
GetWarmthRating
;;;; will call objectreference_dogetter if no matches are found

	Example
		; respond to combat status
		set $isFighting resultfrom actor_dogetter $system.self IsInCombat
		if $isFighting [IsFighting]
		; do non-fighting things
		; respond to whether they are sneaking (perhaps bypassing traps you were going to script in?)
		set $isSneaking resultfrom actor_dogetter $system.self IsSneaking
		if $isSneaking [DoNothingAndExit]
		; now do whatever you were planning to do, since the target is not sneaking

-=-

actor_getfactionrank: Returns: int: the actor's rank in the faction indicated by the FormId
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: faction: the Faction

	Example
		actor_getfactionrank $actor "skyrim.esm:378958"

-=-

actor_getgender: Returns: int: the actor's gender, 0 - male, 1 - female, -1 - None

	Example
		actor_getgender $actor

-=-

actor_getrelation: Returns: int: the relationship rank between the two actors
	- parameter 1: Form: first actor: target Actor
	- parameter 2: Form: second actor: target Actor

	Example
		actor_getrelation $actor $system.player

	4  - Lover
	3  - Ally
	2  - Confidant
	1  - Friend
	0  - Acquaintance
	-1 - Rival
	-2 - Foe
	-3 - Enemy
	-4 - Archnemesis

-=-

actor_getscale: Returns: float: the 'scale' value of the specified Actor
Note: this is properly a function of ObjectReference, so may get pushed to a different group at some point

	Example
		actor_getscale $system.self
		msg_console "Scale reported: " $$

-=-

actor_haskeyword: Returns: bool: true if actor has the keyword, false otherwise.
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: keyword: keyword name

	Example
		actor_haskeyword $actor Vampire

-=-

actor_haslos: Returns: bool: true if first actor can see second actor, false if not.
	- parameter 1: Form: first actor: target Actor
	- parameter 2: Form: second actor: target Actor

	Example
		actor_haslos $actor $system.self
		if $$ = false cannotseeme

-=-

actor_incskill: Increase targeted actor's skill by specified amount.
For the Player, this uses Game.IncrementSkillBy()
For all other Actors, this uses Actor.ModActorValue()
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: skill: skillname e.g. Alteration, Destruction
	- parameter 3: float: value: number

	Example
		actor_incskill $system.self Alteration 1

	Boost Alteration by 1 point

-=-

actor_infaction: Returns: bool: true if actor is in the faction indicated by the FormId, false otherwise
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: faction: the Faction

	Example
		actor_infaction $actor "skyrim.esm:378958"

	$$ will be true if $actor is a follower (CurrentFollowerFaction)

-=-

actor_isaffectedby: Returns: bool: true if the specified actor is currently affected by the MGEF or SPEL indicated by FormID (accepts either); false otherwise
	- parameter 1: Form: actor: target Actor
	- parameter 2: (optional) "ALL": if specified, all following MGEF or SPEL FormIDs must be found on the target Actor
	- parameter 3: Form: mgef: MGEF (Magic Effect) or SPEL (Spell) to check for
	- parameter 4: ; are they affected by all of the effectts (AND)
	- parameter 5: Usage 1: actor_isaffectedby $system.self ALL "skyrim.esm:1030541" "skyrim.esm:1030542" "skyrim.esm:1030543"
	- parameter 6: ; are they affected by any of the effectts (OR)
	- parameter 7: Usage 2: actor_isaffectedby $system.self "skyrim.esm:1030541" "skyrim.esm:1030542" "skyrim.esm:1030543"

-=-

actor_isguard: Returns: bool: true if actor is guard, 1 otherwise.

	Example
		actor_isguard $actor

-=-

actor_isplayer: Returns: bool: true if actor is the player, false otherwise.

	Example
		actor_isplayer $actor

-=-

actor_isvalid: Returns: bool: true if actor is valid, false if not.

	Example
		actor_isvalid $actor
		if $$ = false end
		...
		[end]

	Jump to the end if actor is not valid

-=-

actor_iswearing: Returns: bool: true if actor is wearing the armor indicated by the FormId, false otherwise.
	- parameter 1: actor: target Actor
	- parameter 2: armor: ARMO FormID

	Example
		actor_iswearing $actor "petcollar.esp:31017"

-=-

actor_lochaskeyword: Returns: bool: true if actor's current location has the indicated keyword, false otherwise.
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: keyword: keyword name

	Example
		actor_lochaskeyword $actor "LocTypeInn"

	In a bar, inn, or tavern

-=-

actor_modcrimegold: Specified actor reports player, increasing bounty by specified amount.
	- parameter 1: Form: actor: target Actor
	- parameter 2: int: bountyMod: amount to modify bounty by

	Example
		actor_modcrimegold $actor 100

-=-

actor_name: Returns: string: the actor name

	Example
		actor_name $actor

-=-

actor_playanim: Causes the actor to play the specified animation
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: animation: animation name

	Example
		actor_playanim $system.self "IdleChildCryingStart"

-=-

actor_qnnu: Repaints actor (calls QueueNiNodeUpdate)

	Example
		actor_qnnu $actor

	Note: Do not call this too frequently as the rapid refreshes can causes crashes to desktop

-=-

actor_race: Returns: string: the race name based on sub-function. Blank, empty sub-function returns Vanilla racenames. e.g. "SL" can return SexLab race keynames.
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: sub-function: sub-function

if parameter 2 is "": return actors race name. Skyrims, original name. Like: "Nord", "Breton"

	Example
		actor_race $system.self ""

-=-

actor_race_type: Returns: int: the "race type". This is what the "Race" filter uses for filtering.

	Example
		actor_race_type $system.self

	0 - error occurred
	1 - Player
	2 - Humanoid - Actor.HasKeyword(ActorTypeNPC)
	3 - Undead - Actor.HasKeyword(ActorTypeUndead)
	4 - Creature - presumed, default if nothing else matches

-=-

actor_removefaction: Removes the actor from the specified faction
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: faction: target Faction

	Example
		actor_removefaction $actor "skyrim.esm:3505"

-=-

actor_say: Causes the actor to 'say' the topic indicated by FormId; not usable on the Player
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form topic: the TopicInfo to say

	Example
		actor_say $actor "Skyrim.esm:1234"

-=-

actor_sendmodevent: Causes the actor to send the mod event with the provided arguments
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: event: name of the event
	- parameter 3: string: args: string argument (meaning varies by event sent) (optional: default "")
	- parameter 4: float: argf: float argument (meaning varies by event sent) (optional: default 0.0)

	Example
		actor_sendmodevent $system.self "IHaveNoIdeaButEventNamesShouldBeEasyToFind" "strarg" 20.0

-=-

actor_setalpha: Set the Actor's alpha value (inverse of transparency, 1.0 is fully visible) (has no effect if IsGhost() returns true)
	- parameter 1: Form: actor: target Actor
	- parameter 2: float: alpha: 0.0 to 1.0 (higher is more visible)
	- parameter 3: bool: fade: false - instant | true - fade to the new alpha gradually (optional: default true - fade)

	Example
		actor_setalpha $system.self 0.5 true

	$system.self will fade to new alpha of 0.5, not instantly

-=-

actor_setfactionrank: Sets the actor's rank in the faction indicated by the FormId to the indicated rank
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: faction: target Faction
	- parameter 3: int: rank: new faction rank

	Example
		actor_setfactionrank $actor "skyrim.esm:378958" -1

-=-

actor_setrelation: Set relationship rank between the two actors to the indicated value
	- parameter 1: Form: first actor: target Actor
	- parameter 2: Form: second actor: target Actor
	- parameter 3: int: rank: new rank

	Example
		actor_setrelation $actor $system.player 0

	See actor_getrelation for ranks

-=-

actor_setscale: Sets the actor's scale to the specified value
Note: this is properly a function of ObjectReference, so may get pushed to a different group at some point
	- parameter 1: Form: actor: target Actor
	- parameter 2: scale: float, new scale value to replace the old

	Example
		actor_setscale $system.self 1.01

-=-

actor_state: Returns: (varies): the state of the actor for a given sub-function
	- parameter 1: actor: target Actor
	- parameter 2: sub-function: sub-function
	- parameter 3: third argument: varies by sub-function

if parameter 2 is "GetCombatState": return actors combatstate. 0-no combat, 1-combat, 2-searching
if parameter 2 is "GetLevel": return actors level
if parameter 2 is "GetSleepState": return actors sleep mode. 0-not, 1-not, but wants to, 2-sleeping, 3-sleeping, but wants to wake up
if parameter 2 is "IsAlerted": is actor alerted
if parameter 2 is "IsAlarmed": is actor alerted
if parameter 2 is "IsPlayerTeammate": is actor PC team member
if parameter 2 is "SetPlayerTeammate" (parameter 3: <bool true to set, false to unset>): set actor as PC team member
if parameter 2 is "SendAssaultAlarm": actor will send out alarm

	Example
		actor_state $system.self "GetCombatState"

-=-

actor_wornhaskeyword: Returns: bool: true if actor is wearing any armor with indicated keyword, false otherwise.
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: keyword: keyword name

	Example
		actor_wornhaskeyword $actor "VendorItemJewelry"

-=-

actor_worninslot: Returns: bool: true if actor is wearing armor in the indicated slotId, false otherwise.
	- parameter 1: Form: actor: target Actor
	- parameter 2: int: armorslot: number, e.g. 32 for body slot

	Example
		actor_worninslot $actor 32

-=-


Actor Value:
==============

av_damage: Damage actor value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health
	- parameter 3: float: amount: amount to damage

	Example
		av_damage $system.self Health 100
		av_damage $system.self   $3   100 ;where $3 might be "Health"

	; both of these damage Health by 100. This can result in death.

-=-

av_get: Returns: float: the actor's current value for the specified Actor Value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health

	Example
		av_get $system.self Health

	Sets the actor's current Health into $$

-=-

av_getbase: Returns: float: the actor's base value for the specified Actor Value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health

	Example
		float: av_getbase $system.self Health

	Sets the actor's base Health into $$

-=-

av_getmax: Returns: float: the actor's max value for the specified Actor Value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health

	Example
		av_get $system.self Health

	Sets the actor's max Health into $$

-=-

av_getpercentage: Returns: float: the actor's value as a percentage of max for the specified Actor Value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health

	Example
		av_getpercentage $system.self Health

	Sets the actor's percentage of Health remaining into $$

-=-

av_mod: Modify actor value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health
	- parameter 3: float: amount: amount to modify by

	Example
		av_mod $system.self Health 100
		av_mod $system.self   $3   100 ;where $3 might be "Health"

	; Changes the max value of the actor value. Not the same as restore/damage.

-=-

av_restore: Restore actor value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health
	- parameter 3: float: amount: amount to restore

	Example
		av_restore $system.self Health 100
		av_restore $system.self   $3   100 ;where $3 might be "Health"

	; both of these restore Health by 100 e.g. healing

-=-

av_set: Set actor value
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: av name: Actor Value name e.g. Health
	- parameter 3: float: amount: amount to modify by

	Example
		av_set $system.self Health 100
		av_set $system.self   $3   100 ;where $3 might be "Health"

	Sets the value of the actor value.

-=-


ActorBase:
==============

actorbase_doconsumer: For the specified ActorBase, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/ActorBase_Script
	- parameter 1: actor: target ActorBase (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

SetEssential
SetInvulnerable
SetProtected
SetOutfit
SetCombatStyle
SetClass
SetHeight
SetWeight
SetNthHeadPart
SetFaceMorph
SetFacePreset
SetHairColor
SetFaceTextureSet
SetVoiceType
SetSkin
SetSkinFar
;;;; will call form_doconsumer if no matches are found

	Example
		; make the target invulnerable
		set $selfBase resultfrom actor_dogetter $system.self GetActorBase
		actorbase_doconsumer $selfBase SetInvulnerable true

-=-

actorbase_dofunction: For the targeted ActorBase, set $$ to the result of the specified Function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/ActorBase_Script
	- parameter 1: actor: target ActorBase  (both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

GetOutfit
GetNthHeadPart
GetIndexOfHeadPartByType
GetNthOverlayHeadPart
GetIndexOfOverlayHeadPartByType
GetFaceMorph
GetFacePreset
GetNthSpell
;;;; will call form_dofunction if no matches are found

	Example
		set $spell resultfrom actorbase_dofunction $anActorBase GetNthSpell 0

-=-

actorbase_dogetter: For the targeted ActorBase, return the value from the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/ActorBase_Script
	- parameter 1: actor: target ActorBase  (accepts special variable names ($system.self, $system.player) and both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

GetClass
GetDeadCount
GetGiftFilter
GetRace
GetSex
IsEssential
IsInvulnerable
IsProtected
IsUnique
GetCombatStyle
GetHeight
GetWeight
GetNumHeadParts
GetNumOverlayHeadParts
GetHairColor
GetSpellCount
GetFaceTextureSet
GetVoiceType
GetSkin
GetSkinFar
GetTemplate
;;;; will call form_dogetter if no matches are found

	Example
		set $selfBase resultfrom actor_dogetter $system.self GetActorBase
		set $isUnique resultfrom actorbase_dogetter $selfBase IsUnique
		set $raceName resultfrom actorbase_dogetter $selfBase GetRace ; i.e. "Breton", "Nord", "Argonian"

-=-


Armor:
==============

armor_doconsumer: For the specified Armor, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/Armor_Script
	- parameter 1: Form: target Armor (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

SetArmorRating
SetAR
ModArmorRating
SetModelPath
SetIconPath
SetMessageIconPath
SetWeightClass
SetEnchantment
SetSlotMask
;;;; will call form_doconsumer if no matches are found

	Example
		set $selfShield resultfrom actor_dogetter $system.self GetEquippedShield
		armor_doconsumer $selfShield ModArmorRating 100.0 ; big bonus to target's shield armor rating

-=-

armor_dofunction: For the targeted Armor, set $$ to the result of the specified function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/Armor_Script
	- parameter 1: Form: target Armor  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

GetMaskForSlot
GetModelPath
GetIconPath
GetMessageIconPath
AddSlotToMask
RemoveSlotFromMask
GetNthArmorAddon
;;;; will call form_dofunction if no matches are found

-=-

armor_dogetter: For the targeted Armor, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/Armor_Script
	- parameter 1: Form: target Armor  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

GetWarmthRating
GetArmorRating
GetAR
GetWeightClass
GetEnchantment
GetSlotMask
GetNumArmorAddons
IsLightArmor
IsHeavyArmor
IsClothing
IsBoots
IsCuirass
IsGauntlets
IsHelmet
IsShield
IsJewelry
IsClothingHead
IsClothingBody
IsClothingFeet
IsClothingHands
IsClothingRing
IsClothingRich
IsClothingPoor
;;;; will call form_dogetter if no matches are found

	Example
		set $selfShield resultfrom actor_dogetter $system.self GetEquippedShield
		set $selfShieldArmorRating resultfrom armor_dogetter $selfShield GetArmorRating

-=-

armor_getmaskforslot: Returns the slot mask (https://ck.uesp.net/wiki/Slot_Masks_-_Armor) for the specified armor slot.

	Example
		set $slotMask resultfrom armor_getmaskforslot 32 ; $slotMask should be 0x4

-=-


Core:
==============

toh_elapsed_time: Returns: float: the actual game time passed at the time of the last "Top of the Hour"
For example, if you slept from 1:30 to 4:00, you would get a Top of the Hour event at 4 with a value of 2.5

	Example
		; to get the actual elapsed game time from the previous "Top of the Hour" event
		set $timeSinceLastTOHEvent resultfrom toh_elapsed_time
		; this can happen, for example, due to fast travel and sleep events, where multiple hours may pass

-=-


Form:
==============

form_doaction: For the targeted Form, perform the associated function based on the specified action
'Action' in this case specifically refers to functions that take no parameters and return no values
https://ck.uesp.net/wiki/Form_Script
	- parameter 1: form: target Form (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: action: action name

RegisterForSleep
RegisterForTrackedStatsEvent
StartObjectProfiling
StopObjectProfiling
UnregisterForSleep
UnregisterForTrackedStatsEvent
UnregisterForUpdate
UnregisterForUpdateGameTime
UnregisterForAllKeys
UnregisterForAllControls
UnregisterForAllMenus
RegisterForCameraState
UnregisterForCameraState
RegisterForCrosshairRef
UnregisterForCrosshairRef
RegisterForNiNodeUpdate
UnregisterForNiNodeUpdate

	Example
		; $system.self is an Actor, which is an ObjectReference, which is a Form
		form_doaction $system.self StopCombat

-=-

form_doconsumer: For the specified Form, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/Form_Script
	- parameter 1: form: target Form (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

SetPlayerKnows
SetWorldModelPath
SetName
SetWeight
SetGoldValue
SendModEvent

	Example
		; intended to make the player's shield 0.1 weight units
		set $playerShield resultfrom actor_dogetter $system.player GetEquippedShield
		form_doconsumer $playerShield SetWeight 0.1 ; featherweight shield

-=-

form_dofunction: For the targeted Form, set $$ to the result of the specified function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/Form_Script
	- parameter 1: actor: target Form  (accepts special variable names ($system.self, $system.player) and both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

HasKeywordString
HasKeyword
GetNthKeyword
GetWorldModelNthTextureSet

	Example
		; determine whether a given Form is pointing to an Actor NPC
		set $isNPC resultfrom form_dofunction $system.self HasKeywordString "ActorTypeNPC"

-=-

form_dogetter: For the targeted Actor, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/Form_Script
	- parameter 1: form: target Form (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

GetFormID
GetGoldValue
PlayerKnows
GetType
GetName
GetWeight
GetNumKeywords
IsPlayable
HasWorldModel
GetWorldModelPath
GetWorldModelNumTextureSets
TempClone

	Example
		set $selfName resultfrom form_dogetter $system.self GetName
		msg_console $"Name of $system.self, an Actor, as a Form, via GetName(), is '{$selfName}'"

-=-

form_getbyid: Returns: Form: Performs a lookup for a Form and returns it if found; returns none otherwise
Note that if multiple mods introduce an object with the same editorId, the lookup would only return whichever one won
Anywhere a Form is called for in other functions, one of these formIDs can be substituted.

	Example
		set $aleForm resultfrom form_getbyid "Ale"
		set $aleName resultfrom form_dogetter $aleForm GetName
		msg_notify $"{$aleName}!! Yay!!"
		; Ale!! Yay!!
		; anything that derives from Form can be retrieved with this, including Armor, Weapon, Quest, Spell, MagicEffect, Actor, and other types of objects

-=-


Game:
==============

game_doaction: Calls the specified global Game script action.
https://ck.uesp.net/wiki/Game_Script
	- parameter 1: string: action name
	- parameter 2: remaining arguments vary by action

ClearPrison()
ClearTempEffects()
ForceFirstPerson()
ForceThirdPerson()
HideTitleSequenceMenu()
PrecacheCharGen()
PrecacheCharGenClear()
QuitToMainMenu()
RequestAutoSave()
RequestSave()
SendWereWolfTransformation()
ServeTime()
ShowLimitedRaceMenu()
ShowRaceMenu()
ShowTitleSequenceMenu()
UpdateTintMaskColors()
UpdateHairColor()
UpdateThirdPerson()

	Example
		game_doaction ShowLimitedRaceMenu ; change everything but race and gender

-=-

game_doconsumer: Calls the specified global Game script consumer.
https://ck.uesp.net/wiki/Game_Script
	- parameter 1: string: consumer name
	- parameter 2: remaining arguments vary by consumer

AddAchievement(Int aiAchievementID)
AddPerkPoints(Int aiPerkPoints)
AdvanceSkill(String asSkillName, Float afMagnitude)
DisablePlayerControls(Bool abMovement, Bool abFighting, Bool abCamSwitch, Bool abLooking, Bool abSneaking, Bool abMenu, Bool abActivate, Bool abJournalTabs, Int aiDisablePOVType)
EnableFastTravel(Bool abEnable)
EnablePlayerControls(Bool abMovement, Bool abFighting, Bool abCamSwitch, Bool abLooking, Bool abSneaking, Bool abMenu, Bool abActivate, Bool abJournalTabs, Int aiDisablePOVType)
FadeOutGame(Bool abFadingOut, Bool abBlackFade, Float afSecsBeforeFade, Float afFadeDuration)
FastTravel(ObjectReference akDestination)
IncrementSkill(String asSkillName)
IncrementSkillBy(String asSkillName, Int aiCount)
IncrementStat(String asStatName, Int aiModAmount)
PlayBink(String asFileName, Bool abInterruptible, Bool abMuteAudio, Bool abMuteMusic, Bool abLetterbox)
RequestModel(String asModelName)
SetAllowFlyingMountLandingRequests(Bool abAllow)
SetBeastForm(Bool abEntering)
SetCameraTarget(Actor arTarget)
SetHudCartMode(Bool abSetCartMode)
SetInChargen(Bool abDisableSaving, Bool abDisableWaiting, Bool abShowControlsDisabledMessage)
SetPlayerAIDriven(Bool abAIDriven)
SetPlayerReportCrime(Bool abReportCrime)
SetSittingRotation(Float afValue)
SetSunGazeImageSpaceModifier(ImageSpaceModifier apImod)
ShakeCamera(ObjectReference akSource, Float afStrength)
ShakeController(Float afLeftStrength, Float afRightStrength, Float afDuration)
ShowFirstPersonGeometry(Bool abShow)
ShowTrainingMenu(Actor aActor)
StartTitleSequence(String asSequenceName)
TeachWord(WordOfPower akWord)
TriggerScreenBlood(Int aiValue)
UnlockWord(WordOfPower akWord)
SetPerkPoints(Int perkPoints)
ModPerkPoints(Int perkPoints)
SetGameSettingFloat(String setting, Float value)
SetGameSettingInt(String setting, Int value)
SetGameSettingBool(String setting, Bool value)
SetGameSettingString(String setting, String value)
SaveGame(String name)
LoadGame(String name)
SetNthTintMaskTexturePath(String path, Int n)
SetTintMaskColor(Int color, Int type, Int index)
SetTintMaskTexturePath(String path, Int type, Int index)
SetMiscStat(String name, Int value)
SetPlayersLastRiddenHorse(Actor horse)
SetSkillLegendaryLevel(String actorValue, Int level)
SetPlayerExperience(Float exp)
UnbindObjectHotkey(Int hotkey)
SetPlayerLevel(Int Level)

	Example
		; turn off fall damage
		game_doconsumer SetGameSettingFloat "fjumpfallheightmult" 0.0

-=-

game_dofunction: Calls the specified global Game script function.
https://ck.uesp.net/wiki/Game_Script
	- parameter 1: string: function name
	- parameter 2: remaining arguments vary by function

Bool AddHavokBallAndSocketConstraint(ObjectReference arRefA, String arRefANode, ObjectReference arRefB, String arRefBNode, Float afRefALocalOffsetX, Float afRefALocalOffsetY, Float afRefALocalOffsetZ, Float afRefBLocalOffsetX, Float afRefBLocalOffsetY, Float afRefBLocalOffsetZ)
Int CalculateFavorCost(Int aiFavorPrice)
Actor FindClosestActor(Float afX, Float afY, Float afZ, Float afRadius)
Actor FindClosestActorFromRef(ObjectReference arCenter, Float afRadius)
ObjectReference FindClosestReferenceOfAnyTypeInList(FormList arBaseObjects, Float afX, Float afY, Float afZ, Float afRadius)
ObjectReference FindClosestReferenceOfAnyTypeInListFromRef(FormList arBaseObjects, ObjectReference arCenter, Float afRadius)
ObjectReference FindClosestReferenceOfType(Form arBaseObject, Float afX, Float afY, Float afZ, Float afRadius)
ObjectReference FindClosestReferenceOfTypeFromRef(Form arBaseObject, ObjectReference arCenter, Float afRadius)
Actor FindRandomActor(Float afX, Float afY, Float afZ, Float afRadius)
Actor FindRandomActorFromRef(ObjectReference arCenter, Float afRadius)
ObjectReference FindRandomReferenceOfAnyTypeInList(FormList arBaseObjects, Float afX, Float afY, Float afZ, Float afRadius)
ObjectReference FindRandomReferenceOfAnyTypeInListFromRef(FormList arBaseObjects, ObjectReference arCenter, Float afRadius)
ObjectReference FindRandomReferenceOfType(Form arBaseObject, Float afX, Float afY, Float afZ, Float afRadius)
ObjectReference FindRandomReferenceOfTypeFromRef(Form arBaseObject, ObjectReference arCenter, Float afRadius)
Form GetForm(Int aiFormID)
Form GetFormFromFile(Int aiFormID, String asFilename)
Float GetGameSettingFloat(String asGameSetting)
Float GetGameSettingInt(String asGameSetting)
Float GetGameSettingString(String asGameSetting)
Bool IsWordUnlocked(WordOfPower akWord)
Int QueryStat(String asStat)
Bool RemoveHavokConstraints(ObjectReference arFirstRef, String arFirstRefNodeName, ObjectReference arSecondRef, String arSecondRefNodeName)
Int GetModByName(String name)
String GetModName(Int modIndex)
String GetModAuthor(Int modIndex)
String GetModDescription(Int modIndex)
Int GetModDependencyCount(Int modIndex)
Int GetNthModDependency(Int modIndex, Int n)
Bool IsPluginInstalled(String name)
Int GetLightModByName(String name)
String GetLightModName(Int modIndex)
String GetLightModAuthor(Int modIndex)
String GetLightModDescription(Int modIndex)
Int GetLightModDependencyCount(Int modIndex)
Int GetNthLightModDependency(Int modIndex, Int n)
Int GetNthTintMaskColor(Int n)
Int GetNthTintMaskType(Int n)
Int SetNthTintMaskColor(Int n, Int color)
String GetNthTintMaskTexturePath(Int n)
Int GetNumTintsByType(Int type)
Int GetTintMaskColor(Int type, Int index)
String GetTintMaskTexturePath(Int type, Int index)
Int GetSkillLegendaryLevel(String actorValue)
Float GetExperienceForLevel(Int currentLevel)
Form GetHotkeyBoundObject(Int hotkey)
Bool IsObjectFavorited(Form form)
Form GetFormEx(Int formId)

	Example
		; find a random actor, within 500.0 distance units from the player
		set $randomActor resultfrom game_dofunction FindRandomActorFromRef $system.player 500.0
		; check for existence of the "sl_triggers.esp" mod
		set $sltrModIndex resultfrom game_dofunction GetModByName "sl_triggers.esp"; result of 255 means not installed, but how?
		if $sltrModIndex == 255 [HowIsThisScriptRunningIfSLTRIsNotInstalled]

-=-

game_dogetter: Calls the specified global Game script getter.
https://ck.uesp.net/wiki/Game_Script
	- parameter 1: string: getter name
	- parameter 2: remaining arguments vary by getter

Actor GetPlayer()
ObjectReference GetPlayerGrabbedRef()
Actor GetPlayersLastRiddenHorse()
Float GetRealHoursPassed()
Float GetSunPositionX()
Float GetSunPositionY()
Float GetSunPositionZ()
Bool IsActivateControlsEnabled()
Bool IsCamSwitchControlsEnabled()
Bool IsFastTravelEnabled()
Bool IsFastTravelControlsEnabled()
Bool IsFightingControlsEnabled()
Bool IsJournalControlsEnabled()
Bool IsLookingControlsEnabled()
Bool IsMenuControlsEnabled()
Bool IsMovementControlsEnabled()
Bool IsPlayerSungazing()
Bool IsSneakingControlsEnabled()
Bool UsingGamepad()
Int GetPerkPoints()
Int GetModCount()
Int GetLightModCount()
Int GetNumTintMasks()
Int GetCameraState()
Float GetPlayerExperience()
Bool GetPlayerMovementMode()
ObjectReference GetCurrentCrosshairRef()
ObjectReference GetCurrentConsoleRef()

	Example
		set $numPerkPoints resultfrom game_dogetter GetPerkPoints

-=-


GlobalVariable:
==============

global_getvalue: Returns: float: Finds the indicated GlobalVariable and returns its current value as a float.

	Example
		; retrieve the GLOB via the editorID 'GameDaysPassed', and get it's current value
		set $gameDaysPassed resultfrom global_getvalue "GameDaysPassed"

-=-

global_setvalue: Finds the indicated GlobalVariable and sets its current value.
	- parameter 1: Form: globalVariable: the GLOB record targeted
	- parameter 2: newValue: float

	Example
		; retrieve the GLOB via the editorID 'GameDaysPassed', and set it's current value
		; Sets the Devious Followers willpower global to 20.0
		global_setvalue "_Dwill" 20.0

-=-

globalvariable_doconsumer: For the specified GlobalVariable, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/GlobalVariable_Script
	- parameter 1: Form: target GlobalVariable (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

SetValue
SetValueInt
;;;; will call form_doconsumer if no matches are found

	Example
		; to set the current GLOB TimeScale to 10.0 (half of the default of 20.0, thus slowing the passage of time)
		set $GLOB_timescale resultfrom form_getbyid "TimeScale"
		globalvariable_doconsumer $GLOB_timescale SetValue 10.0
		set $timeScale resultfrom globalvariable_dogetter $GLOB_timescale GetValue
		; $timeScale should be 10.0 now (default is 20.0)

-=-

globalvariable_dofunction: For the targeted GlobalVariable, set $$ to the result of the specified function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/GlobalVariable_Script
	- parameter 1: Form: target GlobalVariable  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

Mod - more thread-safe than get/set
;;;; will call form_dofunction if no matches are found

	Example
		; to apply a modifier to the GLOB TimeScale of -10.0, reducing it from the default of 20.0 down to 10.0
		set $GLOB_timescale resultfrom form_getbyid "TimeScale"
		set $timeScale resultfrom globalvariable_dofunction $GLOB_timescale Mod -10.0
		; $timeScale should be 10.0 now (default is 20.0)

-=-

globalvariable_dogetter: For the targeted GlobalVariable, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/GlobalVariable_Script
	- parameter 1: Form: target GlobalVariable  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

GetValue
GetValueInt
;;;; will call form_dogetter if no matches are found

	Example
		; to get the current GLOB TimeScale
		set $GLOB_timescale resultfrom form_getbyid "TimeScale"
		set $timeScale resultfrom globalvariable_dogetter $GLOB_timescale GetValue
		; $timeScale should be 20.0 by default

-=-


Imagespace Modifier:
==============

ism_applyfade: Apply imagespace modifier - per original author, check CreationKit, SpecialEffects\Imagespace Modifier
	- parameter 1: Form: item: ImageSpaceModifier to apply
	- parameter 2: float: duration: cross-fade duration in seconds

	Example
		ism_applyfade $1 2

-=-

ism_removefade: Remove imagespace modifier - per original author, check CreationKit, SpecialEffects\Imagespace Modifier

	Example
		ism_removefade 2

-=-


Items:
==============

item_add: Adds the item to the actor's inventory. If you are struggling with NPC's, try item_addex.
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: item: the item to add (e.g. Weapon, Armor, Misc. Item)
	- parameter 3: int: count: number (optional: default 1)
	- parameter 4: bool: isSilent: false - show message | true - silent (optional: default: false - show message)

	Example
		item_add $system.self "skyrim.esm:15" 10 false

	Adds 10 gold to the actor, displaying the notification

-=-

item_addex: Adds the item to the actor's inventory, but check if some armor was re-equipped (if NPC)
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: item: ITEM FormId
	- parameter 3: int: count: number (optional: default 1)
	- parameter 4: bool: isSilent: false - show message | true - silent (optional: default false - show message)

	Example
		item_addex $system.self "skyrim.esm:15" 10 false

-=-

item_adduse: Add item (like item_add) and then use the added item (like item_equip). Useful for potions, food, and other consumables.
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: item: the item to add and equip
	- parameter 3: int: count: number (optional: default 1)
	- parameter 4: bool: isSilent: false - show message | true - silent (optional: default false - show message)

	Example
		item_adduse $system.self "skyrim.esm:216158" 1 false

	Add and drink some booze

-=-

item_equip: Equip item ("vanilla" version). Note that the documentation suggests adding the item first in most cases if it does not exist.
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: item: the item to equip
	- parameter 3: bool: preventRemoval: false - removal allowed | true - removal not allowed
	- parameter 4: bool: sound: false - no sound | true - with sound

	Example
		item_equip $system.self "ZaZAnimationPack.esm:159072" true false

	Equip the ZaZ armor on $system.self, silently, with no removal allowed (uses whatever slot the armor uses)

-=-

item_equipex: Equip item (SKSE version)
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: item: the item to equip
	- parameter 3: int: armorslot: number e.g. 32 for body slot
	- parameter 4: bool: sound: false - no sound | true - with sound
	- parameter 5: bool: removalPrevented: false - removal allowed | true - removal not allowed

	Example
		item_equipex $system.self "ZaZAnimationPack.esm:159072" 32 0 1

	Equip the ZaZ armor on $system.self, at body slot 32, silently, with no removal allowed
	Equips item directly, Workaround for "NPCs re-equip all armor, if they get an item that looks like armor"

-=-

item_getcount: Returns: int: how many of a specified item an ObjectReference (typically an actor) has
	- parameter 1: Form: actor: target ObjectReference
	- parameter 2: Form: item: item to count

	Example
		item_getcount $system.self "skyrim.esm:15"

-=-

item_remove: Remove the item from the source's inventory
	- parameter 1: Form: container: the ObjectReference container (e.g. an Actor, Chest, Barrel, corpse) to remove an item from
	- parameter 2: Form: item: the Form of the item to remove
	- parameter 3: count: number
	- parameter 4: bool: silent: false - show message | true - silent (optional: default false - show message)
	- parameter 5: Form: targetContainer: other container (ObjectReference) to move the item to (optional: default none)

	Example
		item_remove $system.self "skyrim.esm:15" 10 false $system.player

	Removes up to 10 gold from the source, looting it to the player (target)

-=-

item_unequipex: Unequip item
	- parameter 1: Form: actor: target Actor
	- parameter 2: Form: item: the item to unequip
	- parameter 3: int: armorslot: number e.g. 32 for body slot

	Example
		item_unequipex $system.self "ZaZAnimationPack.esm:159072" 32

	Unequips the ZaZ armor from slot 32 on $system.self

-=-


JSON:
==============

json_getvalue: Returns: (varies): value from JSON file (uses PapyrusUtil/JsonUtil)
	- parameter 1: string: filename: name of file, rooted from 'Data/SKSE/Plugins/StorageUtilData'
	- parameter 2: string: datatype: int, float, string
	- parameter 3: string: key: the key
	- parameter 4: (varies): default: default value in case it isn't present (optional: default for type)

	Example
		json_getvalue "../somefolder/afile" float "demofloatvalue" 2.3

	JsonUtil automatically appends .json when not given a file extension

-=-

json_save: Tells JsonUtil to immediately save the specified file from cache

	Example
		json_save "../somefolder/afile"

-=-

json_setvalue: Sets a value in a JSON file (uses PapyrusUtil/JsonUtil)
	- parameter 1: string: filename: name of file, rooted from 'Data/SKSE/Plugins/StorageUtilData'
	- parameter 2: string: datatype: int, float, string
	- parameter 3: string: key: the key
	- parameter 4: (varies): new value: value to set

	Example
		json_setvalue "../somefolder/afile" float "demofloatvalue" 2.3

	JsonUtil automatically appends .json when not given a file extension

-=-


MfgFix:
==============

mfg_getphonememodifier: Returns: int: facial expression (requires MfgFix https://www.nexusmods.com/skyrimspecialedition/mods/11669)
	- parameter 1: Form: actor: target Actor
	- parameter 2: int: mode: number, 0 - set phoneme | 1 - set modifier
	- parameter 3: int: id: an id (I'm not familiar with MfgFix :/)

	Example
		mfg_getphonememodifier $system.self 0 $1

-=-

mfg_reset: Resets facial expression (requires MfgFix https://www.nexusmods.com/skyrimspecialedition/mods/11669)

	Example
		mfg_reset $system.self

-=-

mfg_setphonememodifier: Set facial expression (requires MfgFix https://www.nexusmods.com/skyrimspecialedition/mods/11669)
	- parameter 1: Form: actor: target Actor
	- parameter 2: int: mode: number, 0 - set phoneme | 1 - set modifier
	- parameter 3: int: id: an id  (I'm not familiar with MfgFix :/)
	- parameter 4: int: value: new value
	- parameter 5: <actor variable> <mode> <id> <value>

	Example
		mfg_setphonememodifier $system.self 0 $1 $2

-=-


NFF (Nether's Follower Framework):
==============

nff_getfollowers: Returns: Form[]: a list containing the followers

	Example
		set $nffFollowers resultfrom nff_getfollowers
		set $count resultfrom listcount $nffFollowers
		; counting backwards
		while $count > 0
		inc $count -1
		set $follower $nffFollowers[$count]
		; do something for each $follower
		set $followerName resultfrom actor_name $follower
		msg_notify $"{$followerName} is your #1 fan!"
		endwhile

-=-


NiOverride:
==============

apply_overlay: Tells NIO to apply pending changes. Not typically required.

	Example
		apply_overlay $system.player

-=-

changeoverlay_transparency: Modifies the transparency of a given overlay
	- parameter 1: Form: actor: target Actor
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: nodeName: (body, face, etc...)
	- parameter 4: float: transparency

	Example
		changeoverlay_transparency $system.player true $nodeName 1.0

-=-

getoverlay_slot: Returns: string: returns a free overlay slot
	- parameter 1: Form: actor: target Actor
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: nodeName: (body, face, etc...)

	Example
		set $nodeName resultfrom getvoverlay_slot $system.player true "Body"

-=-

nio_addnodeoverride_bool: Calls NiOveride.AddNodeOverride for bool
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index
	- parameter 6: bool: value: value to apply
	- parameter 7: bool: persist: persist the override?

-=-

nio_addnodeoverride_float: Calls NiOveride.AddNodeOverride for float
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index
	- parameter 6: float: value: value to apply
	- parameter 7: bool: persist: persist the override?

-=-

nio_addnodeoverride_int: Calls NiOveride.AddNodeOverride for int
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index
	- parameter 6: int: value: value to apply
	- parameter 7: bool: persist: persist the override?

-=-

nio_addnodeoverride_string: Calls NiOveride.AddNodeOverride for string
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index
	- parameter 6: string: value: value to apply
	- parameter 7: bool: persist: persist the override?

-=-

nio_addnodeoverride_textureset: Calls NiOveride.AddNodeOverride for TextureSet
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index
	- parameter 6: Form: value: TextureSet value to apply
	- parameter 7: bool: persist: persist the override?

-=-

nio_clearbodymorph: Clears the morph value of the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: string: morphName: name of the morph you are working with
	- parameter 3: string: keyName: NIO key you are working with

-=-

nio_get_morphkeys: Returns: string[]: a list of the keys applied to the target actor for the specified morph.
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: string: morphName: name of the morph you are working with

-=-

nio_get_morphnames: Returns: string[]: a list of the morphNames applied to the target actor.

-=-

nio_getbodymorph: Returns: float: the current morph value for the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: string: morphName: name of the morph you are working with
	- parameter 3: string: keyName: NIO key you are working with

-=-

nio_getnodeoverride_bool: Returns: bool: the bool override for the node on the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index

-=-

nio_getnodeoverride_float: Returns: float: the float override for the node on the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index

-=-

nio_getnodeoverride_int: Returns: int: the int override for the node on the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index

-=-

nio_getnodeoverride_string: Returns: string: the string override for the node on the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index

-=-

nio_getnodeoverride_textureset: Returns: Form: the TextureSet override for the node on the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: node: NIO node you are working with
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index

-=-

nio_hasbodymorph: Returns: bool: true if the target has the body morph; false otherwise
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: string: morphName: name of the morph you are working with
	- parameter 3: string: keyName: NIO key you are working with

-=-

nio_hasnodeoverride: Returns: bool: true if the target has the node override; false otherwise
	- parameter 1: Form: target of function (e.g. $system.player)
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: nodeName: (body, face, etc...)
	- parameter 4: int: _key: NIO key
	- parameter 5: int: index: NIO index

-=-

nio_setbodymorph: Sets the bodymorph of the target
	- parameter 1: Form: ref: target of function (e.g. $system.player)
	- parameter 2: string: morphName: name of the morph you are working with
	- parameter 3: string: keyName: NIO key you are working with
	- parameter 4: float: value: value to apply

-=-

nio_updatemodelweight: Updates the weight data post morph value. Only to be used on actors who have morph values set.

-=-

param_overlay: Adds a tattoo overlay to the node with the given transparency
	- parameter 1: Form: actor: target Actor
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: nodeName: (body, face, etc...)
	- parameter 4: string: tattoo
	- parameter 5: float: transparency

	Example
		param_overlay $system.player true $nodeName $tattooName 1.0

-=-

remove_overlay: Removes the overlay indicated by nodeName
	- parameter 1: Form: actor: target Actor
	- parameter 2: bool: isFemale: true if a female target, false otherwise
	- parameter 3: string: nodeName: (body, face, etc...)

	Example
		remove_overlay $system.player true $nodeName

-=-


ObjectReference:
==============

objectreference_doaction: For the targeted ObjectReference, perform the associated function based on the specified action
'Action' in this case specifically refers to functions that take no parameters and return no values
https://ck.uesp.net/wiki/ObjectReference_Script
	- parameter 1: objectreference: target ObjectReference  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: action: action name

ClearDestruction
Delete
DeleteWhenAble
ForceAddRagdollToWorld
ForceRemoveRagdollFromWorld
InterruptCast
MoveToMyEditorLocation
RemoveAllInventoryEventFilters
StopTranslation
ResetInventory
;;;; will call form_doaction if no matches are found

	Example
		; $system.self is an Actor, which is an ObjectReference, which is a Form
		; StopCombat is a Form action, so the call to ObjectReference falls through to the parent
		objectreference_doaction $system.self StopCombat

-=-

objectreference_doconsumer: For the specified ObjectReference, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/ObjectReference_Script
	- parameter 1: objectreference: target ObjectReference (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

Activate
AddInventoryEventFilter
AddItem
AddKeyIfNeeded
AddToMap
ApplyHavokImpulse
BlockActivation
CreateDetectionEvent
DamageObject
Disable
DisableLinkChain
DisableNoWait
DropObject
Enable
EnableFastTravel
EnableLinkChain
EnableNoWait
IgnoreFriendlyHits
KnockAreaEffect
Lock
MoveTo
MoveToInteractionLocation
MoveToNode
PlayTerrainEffect
ProcessTrapHit
PushActorAway
RemoveAllItems
RemoveInventoryEventFilter
RemoveItem
Reset
Say
SendStealAlarm
SetActorCause
SetActorOwner
SetAngle
SetAnimationVariableBool
SetAnimationVariableFloat
SetAnimationVariableInt
SetDestroyed
SetFactionOwner
SetLockLevel
SetMotionType
SetNoFavorAllowed
SetOpen
SetPosition
SetScale
SplineTranslateTo
SplineTranslateToRef
SplineTranslateToRefNode
TetherToHorse
TranslateTo
TranslateToRef
SetHarvested
SetItemHealthPercent
SetItemMaxCharge
SetItemCharge
SetEnchantment
CreateEnchantment
;;;; will call form_doconsumer if no matches are found

	Example
		; give the player's shield 'Fortify Block +20', with 200.0 charge (and technically duration 30.0, but I don't think that actually matters)
		set $playerShield resultfrom actor_dogetter $system.player GetEquippedShield
		objectreference_doconsumer $playerShield CreateEnchantment 200.0 "AlchFortifyBlock" 20.0 0.0 30.0
		; or give both 'Fortify Block +20' as above, as well as 'Fortify Restoration +20'
		objectreference_doconsumer $playerShield CreateEnchantment 200.0 "AlchFortifyBlock" 20.0 0.0 30.0 "AlchFortifyRestoration" 20.0 0.0 30.0

-=-

objectreference_dofunction: For the targeted ObjectReference, set $$ to the result of the specified function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/ObjectReference_Script
	- parameter 1: actor: target ObjectReference  (accepts special variable names ($system.self, $system.player) and both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

CalculateEncounterLevel
CountLinkedRefChain
GetAnimationVariableBool
GetAnimationVariableFloat
GetAnimationVariableInt
GetDistance
GetHeadingAngle
GetItemCount
HasEffectKeyword
HasNode
HasRefType
IsActivateChild
IsFurnitureInUse
IsFurnitureMarkerInUse
IsInLocation
MoveToIfUnloaded
PlayAnimation
PlayAnimationAndWait
PlayGamebryoAnimation
PlayImpactEffect
PlaySyncedAnimationAndWaitSS
PlaySyncedAnimationSS
RampRumble
WaitForAnimationEvent
SetDisplayName
GetNthForm
PlaceActorAtMe
PlaceAtMe
GetLinkedRef
GetNthLinkedRef
;;;; will call form_dofunction if no matches are found

	Example
		; in response to a containeractivate trigger, to quickly determine whether the container had
		; something that you might want to force into the player's inventory
		set $theContainer $request.core.activatedContainer"
		set $lookingFor $system.forms.gold ; shorthand for gold i.e. septims
		set $foundCount resultfrom objectreference_dofunction $theContainer GetItemCount $lookingFor
		; or determine how much gold the target of the script has on them
		set $selfGold resultfrom objectreference_dofunction $system.self GetItemCount $lookingFor

-=-

objectreference_dogetter: For the targeted ObjectReference, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/ObjectReference_Script
	- parameter 1: objectreference: target ObjectReference  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

CanFastTravelToMarker
GetActorOwner
GetAngleX
GetAngleY
GetAngleZ
GetBaseObject
GetCurrentDestructionStage
GetCurrentLocation
GetCurrentScene
GetEditorLocation
GetFactionOwner
GetHeight
GetItemHealthPercent
GetKey
GetLength
GetLockLevel
GetMass
GetOpenState
GetParentCell
GetPositionX
GetPositionY
GetPositionZ
GetScale
GetTriggerObjectCount
GetVoiceType
GetWidth
GetWorldSpace
IsActivationBlocked
Is3DLoaded
IsDeleted
IsDisabled
IsEnabled
IsIgnoringFriendlyHits
IsInDialogueWithPlayer
IsInInterior
IsLocked
IsMapMarkerVisible
IsNearPlayer
GetNumItems
GetTotalItemWeight
GetTotalArmorWeight
IsHarvested
GetItemMaxCharge
GetItemCharge
IsOffLimits
GetDisplayName
GetEnableParent
GetEnchantment
GetNumReferenceAliases
;;;; will call form_dogetter if no matches are found

	Example
		; inside/outside
		set $isInside resultfrom objectreference_dogetter $system.self IsInInterior
		if $isInside == true [IsInside]
		if $isInside == false [IsNotInside]
		; working with containers, (including actors, chests, barrels, etc.) which all derive from ObjectReference
		; this would be valid, to check the inventory contents of whomever the script is running on
		set $theContainer $system.self
		; this would be valid, to check the inventory contents of the player, regardless of whomever the script is running on
		set $theContainer $system.player
		; this would be valid, to check the inventory contents of a container, in response to the container activation event
		set $theContainer $request.core.activatedContainer
		; for all of the settings of $theContainer above, the following would validly obtain the count of contained items
		set $inventoryCount resultfrom objectreference_dogetter $theContainer GetNumItems

-=-


PapyrusUtil:
==============

jsonutil: Wrapper around most JsonUtil functions
	- parameter 1: <sub-function> - JsonUtil functionality to perform
	- parameter 2: <filename> - JSON file to interact with, rooted from 'Data/SKSE/Plugins/StorageUtilData'

Valid sub-functions are:
load              : <filename>
save              : <filename>
ispendingsave     : <filename>
isgood            : <filename>
geterrors         : <filename>
exists            : <filename>
unload            : <filename> [saveChanges: 0 - false | 1 - true] [minify: 0 - false | 1 - true]
set               : <filename> <key> <type: int | float | string | form> <value>
get               : <filename> <key> <type: int | float | string | form> [<default value>]
unset             : <filename> <key> <type: int | float | string | form>
has               : <filename> <key> <type: int | float | string | form>
adjust            : <filename> <key> <type: int | float>          <amount>
listadd           : <filename> <key> <type: int | float | string | form> <value>
listget           : <filename> <key> <type: int | float | string | form> <index>
listset           : <filename> <key> <type: int | float | string | form> <index> <value>
listremoveat      : <filename> <key> <type: int | float | string | form> <index>
listinsertat      : <filename> <key> <type: int | float | string | form> <index> <value>
listclear         : <filename> <key> <type: int | float | string | form>
listcount         : <filename> <key> <type: int | float | string | form>
listcountvalue    : <filename> <key> <type: int | float | string | form> <value> [<exclude: 0 - false | 1 - true>]
listfind          : <filename> <key> <type: int | float | string | form> <value>
listhas           : <filename> <key> <type: int | float | string | form> <value>
listresize        : <filename> <key> <type: int | float | string | form> <toLength> [<filler value>]
listslice         : <filename> <key> <type: int | float | string | form> <slice length> [<startIndex = 0>] ; returns a typed list e.g. int[]
listcopy          : <filename> <key> <type: int | float | string | form> <list variable | value [value ... ] >
listtoarray       : <filename> <key> <type: int | float | string | form> ; returns a typed list e.g. int[]

	Example
		Example from the regression test script:
		set $testfile "../sl_triggers/commandstore/jsonutil_function_test"
		
		inc $thread.testCount
		set $flag resultfrom jsonutil exists $testfile
		if $flag
		inc $thread.passCount
		deb_msg $"PASS: jsonutil exists ({flag})"
		else
		deb_msg $"FAIL: jsonutil exists ({flag})"
		endif
		
		inc $thread.testCount
		set $avalue resultfrom jsonutil set $testfile "key1" "string" "avalue"
		if $avalue == "avalue"
		inc $thread.passCount
		deb_msg $"PASS: jsonutil set ({avalue})"
		else
		deb_msg $"FAIL: jsonutil set ({avalue})"
		endif
		
		inc $thread.testCount
		set $hasworks resultfrom jsonutil has $testfile "key1" "string"
		if $hasworks
		inc $thread.passCount
		deb_msg $"PASS: jsonutil has ({hasworks})"
		else
		deb_msg $"FAIL: jsonutil has ({hasworks})"
		endif
		
		inc $thread.testCount
		set $unsetworks resultfrom jsonutil unset $testfile "key1" "string"
		if $unsetworks
		inc $thread.passCount
		deb_msg $"PASS: jsonutil unset ({unsetworks})"
		else
		deb_msg $"FAIL: jsonutil unset ({unsetworks})"
		endif
		
		inc $thread.testCount
		set $hasalsoworks resultfrom jsonutil has $testfile "key1" "string"
		if $hasalsoworks
		deb_msg $"FAIL: jsonutil unset or has is failing ({hasalsoworks})"
		else
		inc $thread.passCount
		deb_msg $"PASS: jsonutil unset/has ({hasalsoworks})"
		endif
		
		inc $thread.testCount
		set $setfloatworks resultfrom jsonutil set $testfile "key1" "float" "87"
		if $setfloatworks == 87
		inc $thread.passCount
		deb_msg $"PASS: jsonutil set with float ({setfloatworks})"
		else
		deb_msg $"FAIL: jsonutil set with float ({setfloatworks})"
		endif
		
		inc $thread.testCount
		set $checktypes resultfrom jsonutil has $testfile "key1" "string"
		if $checktypes
		deb_msg $"FAIL: has failed, crossed the streams float and string? ({setfloatworks})"
		else
		inc $thread.passCount
		deb_msg $"PASS: has success ({setfloatworks})"
		endif
		
		inc $thread.testCount
		jsonutil listclear $testfile  "somelist" "int"
		
		jsonutil listadd $testfile  "somelist"  "int"  1
		jsonutil listadd $testfile  "somelist"  "int"  2
		jsonutil listadd $testfile  "somelist"  "int"  3
		jsonutil listadd $testfile  "somelist"  "int"  1
		
		set $listcount resultfrom jsonutil listcount $testfile "somelist" "int"
		if $listcount == 4
		inc $thread.passCount
		deb_msg $"PASS: listclear/listadd/listcount ({setfloatworks})"
		else
		deb_msg $"FAIL: listclear/listadd/listcount; one has failed ({setfloatworks})"
		endif
		
		jsonutil save $testfile

-=-

storageutil: Wrapper around most StorageUtil functions
	- parameter 1: <sub-function> - StorageUtil functionality to perform
	- parameter 2: <form identifier> - object to interact with; see below for details

<form identifier> - represents the object you want StorageUtil activity keyed to
StorageUtil accepts 'none' (null) to represent "global" StorageUtil space
For SLTScript purposes, any identifier that will resolve to a Form object can be used
Or you may specify the empty string ("") for the global space
For example, any of the following might be valid:
$system.self, $system.player, $actor   ; these all resolve to Actor
"sl_triggers.esp:3426"   ; the FormID for the main Quest object for sl_triggers
Read more about StorageUtil for more details
Valid sub-functions are:
set               : <form identifier> <key> <type: int | float | string | form> <value>
get               : <form identifier> <key> <type: int | float | string | form> [<default value>]
pluck             : <form identifier> <key> <type: int | float | string | form> [<default value>]
unset             : <form identifier> <key> <type: int | float | string | form>
has               : <form identifier> <key> <type: int | float | string | form>
adjust            : <form identifier> <key> <type: int | float>          <amount>
listadd           : <form identifier> <key> <type: int | float | string | form> <value>
listget           : <form identifier> <key> <type: int | float | string | form> <index>
listpluck         : <form identifier> <key> <type: int | float | string | form> <index> <default value>
listset           : <form identifier> <key> <type: int | float | string | form> <index> <value>
listremoveat      : <form identifier> <key> <type: int | float | string | form> <index>
listinsertat      : <form identifier> <key> <type: int | float | string | form> <index> <value>
listadjust        : <form identifier> <key> <type: int | float | string | form> <index> <amount>
listclear         : <form identifier> <key> <type: int | float | string | form>
listpop           : <form identifier> <key> <type: int | float | string | form>
listshift         : <form identifier> <key> <type: int | float | string | form>
listsort          : <form identifier> <key> <type: int | float | string | form>
listcount         : <form identifier> <key> <type: int | float | string | form>
listcountvalue    : <form identifier> <key> <type: int | float | string | form> <value> [<exclude: 0 - false | 1 - true>]
listfind          : <form identifier> <key> <type: int | float | string | form> <value>
listhas           : <form identifier> <key> <type: int | float | string | form> <value>
listresize        : <form identifier> <key> <type: int | float | string | form> <toLength> [<filler value>]
listslice         : <form identifier> <key> <type: int | float | string | form> <slice length> [<startIndex = 0>] ; returns a typed list e.g. int[]
listcopy          : <form identifier> <key> <type: int | float | string | form> <list variable | value [value ... ] >
listtoarray       : <form identifier> <key> <type: int | float | string | form> ; returns a typed list e.g. int[]

	Example
		Example usage from the regression tests
		set $suhost $system.player
		
		inc $thread.testCount
		set $result resultfrom storageutil set $suhost "key1" "string" "avalue"
		if $result == "avalue"
		inc $thread.passCount
		deb_msg $"PASS: storageutil set ({result})"
		else
		deb_msg $"FAIL: storageutil set ({result})"
		endif
		
		inc $thread.testCount
		set $result resultfrom storageutil has $suhost "key1" "string"
		if $result
		inc $thread.passCount
		deb_msg $"PASS: storageutil has ({result})"
		else
		deb_msg $"FAIL: storageutil has ({result})"
		endif
		
		inc $thread.testCount
		set $result resultfrom storageutil unset $suhost "key1" "string"
		if $result
		inc $thread.passCount
		deb_msg $"PASS: storageutil unset ({result})"
		else
		deb_msg $"FAIL: storageutil unset ({result})"
		endif
		
		inc $thread.testCount
		set $result resultfrom storageutil has $suhost "key1" "string"
		if $result
		deb_msg $"FAIL: storageutil unset ({result})"
		else
		inc $thread.passCount
		deb_msg $"PASS: storageutil unset ({result})"
		endif
		
		inc $thread.testCount
		set $result resultfrom storageutil set $suhost "key1" "float" "87"
		if $result == 87
		inc $thread.passCount
		deb_msg $"PASS: storageutil set float ({result})"
		else
		deb_msg $"FAIL: storageutil set float ({result})"
		endif
		
		inc $thread.testCount
		set $result resultfrom storageutil has $suhost "key1" "string"
		if $result
		deb_msg $"FAIL: storageutil unset/has ({result})"
		else
		inc $thread.passCount
		deb_msg $"PASS: storageutil unset/has ({result})"
		endif
		
		inc $thread.testCount
		storageutil listclear $suhost  "somelist" "int"
		
		storageutil listadd $suhost  "somelist"  "int"  1
		storageutil listadd $suhost  "somelist"  "int"  2
		storageutil listadd $suhost  "somelist"  "int"  3
		storageutil listadd $suhost  "somelist"  "int"  1
		
		set $result resultfrom storageutil listcount $suhost "somelist" "int"
		if $result == 4
		inc $thread.passCount
		deb_msg $"PASS: storageutil listclear/listadd/listcount ({result})"
		else
		deb_msg $"FAIL: storageutil listclear/listadd/listcount ({result})"
		endif

-=-


Perks:
==============

perk_add: Add specified perk to the targeted actor
	- parameter 1: Form: perk: the Perk to add
	- parameter 2: Form: actor: target Actor

	Example
		perk_add "skyrim.esm:12384" $system.self

-=-

perk_addpoints: Add specified number of perk points to player

	Example
		perk_addpoints 4

-=-

perk_remove: Remove specified perk from the targeted actor
	- parameter 1: Form: perk: the Perk to remove
	- parameter 2: Form: actor: target Actor

	Example
		perk_remove "skyrim.esm:12384" $system.self

-=-


Quest:
==============

quest_doaction: For the targeted Quest, perform the associated function based on the specified action
'Action' in this case specifically refers to functions that take no parameters and return no values
https://ck.uesp.net/wiki/Quest_Script
	- parameter 1: Form: target Quest  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: action: action name

CompleteAllObjectives
CompleteQuest
FailAllObjectives
Reset
Stop
;;;; will call form_doaction if no matches are found

	Example
		; suppose you want to reset a mod's quest form
		; and can obtain the editorID via xedit, or construct one from formid and modname
		set $modQuest resultfrom form_getbyid $questFormID
		quest_doaction $modQuest Reset

-=-

quest_doconsumer: For the specified Quest, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/Quest_Script
	- parameter 1: Form: target Quest (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

SetActive
SetObjectiveCompleted
SetObjectiveDisplayed
SetObjectiveFailed
;;;; will call form_doconsumer if no matches are found

	Example
		; suppose you want to deactivate a quest mod
		; and can obtain the editorID via xedit, or construct one from formid and modname
		set $modQuest resultfrom form_getbyid $questFormID
		quest_doconsumer $modQuest SetActive false

-=-

quest_dofunction: For the targeted Quest, set $$ to the result of the specified function
'Function' in this case specifically refers to functions that take one or more parameters and return a value
https://ck.uesp.net/wiki/Quest_Script
	- parameter 1: Form: target Quest  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: function: function name

GetAlias
GetStageDone
IsObjectiveCompleted
IsObjectiveDisplayed
IsObjectiveFailed
IsStageDone
ModObjectiveGlobal
SetCurrentStageID
SetStage
UpdateCurrentInstanceGlobal
GetQuest
GetNthAlias
GetAliasByName
;;;; will call form_dofunction if no matches are found

	Example
		; suppose you want to determine for a quest mod whether a given stage is done (maybe that impacts mod state or activity)
		; and can obtain the editorID via xedit, or construct one from formid and modname
		set $modQuest resultfrom form_getbyid $questFormID
		set $stageIsDone resultfrom quest_dofunction $modQuest IsStageDone 100
		if $stageIsDone == true [AsIfTheStageWereDone]

-=-

quest_dogetter: For the targeted Quest, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/Quest_Script
	- parameter 1: Form: target Quest  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

GetCurrentStageID
GetStage
IsActive
IsCompleted
IsRunning
IsStarting
IsStopping
IsStopped
Start
GetID
GetPriority
GetNumAliases
;;;; will call form_dogetter if no matches are found

	Example
		; suppose you want to obtain a mod's quest stage
		; and can obtain the editorID via xedit, or construct one from formid and modname
		set $modQuest resultfrom form_getbyid $questFormID
		set $modQuestStage resultfrom quest_dogetter $modQuest GetStage

-=-


Sound:
==============

snd_play: Returns: int: the sound instance handle from playing the specified audio from the specified actor
	- parameter 1: Form: audio: the Audio Form to play
	- parameter 2: Form: actor: target Actor

	Example
		snd_play "skyrim.esm:318128" $system.self

-=-

snd_setvolume: Set the sound volume using the specified sound instance handle (from snd_play)
	- parameter 1: int: handle: sound instance handle from snd_play
	- parameter 2: Form: actor: target Actor
	- parameter 3: float; volume: 0.0 - 1.0

	Example
		snd_setvolume $1 0.5

	Set the volume of the audio sound playing with handle stored in $1 to 50%

-=-

snd_stop: Stops the audio specified by the sound instance handle (from snd_play)

	Example
		snd_stop $1

-=-


Spells:
==============

spell_add: Adds the specified SPEL by FormId to the targeted Actor, usually to add as an available power or spell in the spellbook.
	- parameter 1: Form: spell: the Spell to add
	- parameter 2: Form: actor: target Actor

	Example
		spell_add "skyrim.esm:275236" $system.self

	The light spell is now in the actor's spellbook

-=-

spell_cast: Cast spell at target
	- parameter 1: Form: spell: the Spell to cast
	- parameter 2: Form: actor: target Actor

	Example
		spell_cast "skyrim.esm:275236" $system.self

	Casts light spell on self

-=-

spell_dcsa: Casts spell with DoCombatSpellApply Papyrus function. It is usually used for spells that
are part of a melee attack (like animals that also carry poison or disease).
	- parameter 1: Form: spell: the Spell
	- parameter 2: Form: actor: target Actor

	Example
		spell_dcsa "skyrim.esm:275236" $system.self

-=-

spell_dispel: Dispels specified SPEL by FormId from targeted Actor
	- parameter 1: Form: spell: the Spell to dispel
	- parameter 2: Form: actor: target Actor

	Example
		spell_dispel "skyrim.esm:275236" $system.self

	If light was currently on $system.self, it would now be dispelled

-=-

spell_remove: Removes the specified SPEL by FormId from the targeted Actor, usually to remove as an available power or spell in the spellbook.
	- parameter 1: Form: spell: the Spell to remove
	- parameter 2: Form: actor: target Actor

	Example
		spell_remove "skyrim.esm:275236" $system.self

	The light spell should no longer be in the actor's spellbook

-=-


TopicInfo:
==============

topicinfo_getresponsetext: Returns: string: Attempts to return a single response text associated with the provided TopicInfo (by editorID or FormID)
Note: This is more beta than normal; it isn't obvious whether in some cases multiple strings should actually be returned.

	Example
		topicinfo_getresponsetext "Skyrim.esm:0x00020954"
		msg_notify $$
		; $$ would contain "I used to be an adventurer like you. Then I took an arrow in the knee..."

-=-


Utility:
==============

console: Executes the console command (requires a ConsoleUtil variant installed
Recommend ConsoleUtil-Extended https://www.nexusmods.com/skyrimspecialedition/mods/133569)
	- parameter 1: Form: actor: target Actor
	- parameter 2: string: command: <command fragment> [<command fragment> ...] ; all <command fragments> will be concatenated

	Example
		console $system.self "sgtm" "" "0.5"
		console $system.self "sgtm 0.5"

	Both are the same

-=-

deb_msg: Joins all arguments together into a single string and logs to "<Documents>\My Games\Skyrim Special Edition\SKSE\sl-triggers.log"
This file is truncated on game start.
Usage 1: deb_msg <msg> [<msg> ...]
Usage 2: deb_msg $msglist ; where $msglist is a string[]
	- parameter 1: string: message: any string or interpolated string
	- parameter 2: string[]: msglist: a list of strings to concatenate for a message

	Example
		deb_msg "Hello " "world!"
		deb_msg "Hello world!"
		set $whom "world"
		deb_msg "Hello {$whom}!"
		set $msg[0] "Hello "
		set $msg[1] "world!"
		deb_msg $msg

	; These all print the same thing

-=-

math: Returns: (varies): values from math operations based on sub-function
	- parameter 1: sub-function: sub-function
	- parameter 2: variable: variable 3 varies by sub-function

if parameter 2 1s "asint": return parameter 3 as integer
if parameter 2 1s "floor": return parameter 3 the largest integer less than or equal to the value
if parameter 2 1s "ceiling": return parameter 3 the smallest integer greater than or equal to the value
if parameter 2 1s "abs": return parameter 3 as absolute value of the passed in value - N for N, and N for (-N)
if parameter 2 1s "toint": return parameter 3 as integer. Parameter 3 can be in dec or hex. If it starts with 0, its converted as hex value

	Example
		math floor 1.2

-=-

msg_console: Joins all arguments together into a single string and displays the message in the console
Usage 1: msg_console <msg> [<msg> ...]
Usage 2: msg_console $msglist ; where $msglist is a string[]
	- parameter 1: string: message: any string or interpolated string
	- parameter 2: string[]: msglist: a list of strings to concatenate for a message

	Example
		msg_console "Hello " "world!"
		msg_console "Hello world!"
		set $whom "world"
		msg_console "Hello {$whom}!"
		set $msg[0] "Hello "
		set $msg[1] "world!"
		msg_console $msg

	; These all print the same thing

-=-

msg_notify: Joins all arguments together into a single string and displays the message in the standard notification area (top left of your screen by default)
Usage 1: msg_notify <msg> [<msg> ...]
Usage 2: msg_notify $msglist ; where $msglist is a string[]
	- parameter 1: string: message: any string or interpolated string
	- parameter 2: string[]: msglist: a list of strings to concatenate for a message

	Example
		msg_notify "Hello " "world!"
		msg_notify "Hello world!"
		set $whom "world"
		msg_notify "Hello {$whom}!"
		set $msg[0] "Hello "
		set $msg[1] "world!"
		msg_notify $msg

	; These all print the same thing

-=-

rnd_float: Returns: float: a random integer between min and max inclusive
	- parameter 1: float: min: number
	- parameter 2: float: max: number

	Example
		rnd_float 1 100

-=-

rnd_int: Returns: int: a random integer between min and max inclusive
	- parameter 1: int: min: number
	- parameter 2: int: max: number

	Example
		rnd_int 1 100

-=-

rnd_list: Returns: string: one of the arguments at random
Usage 1: rnd_list <argument> [<argument> ...]
Usage 2: rnd_list $arglist ; where $arglist is a string[]
	- parameter 1: string: argument: any string or interpolated string
	- parameter 2: string[]: arglist: a list of strings to pick from

	Example
		rnd_list "One" "Two" "Three"
		listadd $picklist "One" "Two" "Three"
		rnd_list $picklist

	; These do the same thing

-=-

util_game: Returns: (varies): Perform game related functions based on sub-function
	- parameter 1: sub-function: sub-function
	- parameter 2: parameter: varies by sub-function

if sub-function is "IncrementStat", (parameter 3, <stat name>, parameter 4, <amount>), see https://ck.uesp.net/wiki/IncrementStat_-_Game
if sub-function is "QueryStat", (parameter 3, <stat name>), returns the value

	Example
		util_game "IncrementStat" "Bribes" 1

-=-

util_getgametime: Returns: float: the value of Utility.GetCurrentGameTime() (a float value representing the number of days in game time; mid-day day 2 is 1.5)

	Example
		util_getgametime

-=-

util_getgametime: Returns: int: the in-game hour (i.e. 2:30 AM returns 2)

	Example
		util_getgametime

-=-

util_getrandomactor: Returns: Form: a random actor within specified range of self

	Example
		util_getrandomactor 320

-=-

util_getrealtime: Returns: float: the value of Utility.GetCurrentRealTime() (a float value representing the number of seconds since Skyrim.exe was launched this session)

	Example
		util_getrealtime

-=-

util_getrndactor: Returns: Form: a random actor within specified range of self

	Example
		util_getrndactor 500
		set $isvalid resultfrom actor_isvalid $actor
		if $isvalid == false [end]
		msg_notify "Someone is nearby!"
		[end]

-=-

util_sendevent: Send SKSE custom event, with each type/value pair being an argument to the custom event
	- parameter 1: string: event: name of the event
	- parameter 2: (type/value pairs are optional; this devolves to util_sendmodevent <eventname>, though with such a call the event signature would require having no arguments)
	- parameter 3: string: param type: type of parameter e.g. "bool", "int", etc.
	- parameter 4: string: param value: value of parameter
	- parameter 5: [type/value, type/value ...]

<type> can be any of [bool, int, float, string, form]

	Example
		util_sendevent "slaUpdateExposure" form $system.self float 33

	The "slaUpdateExposure" event will be sent with $system.self, and the float value of 33.0 as the two arguments

-=-

util_sendmodevent: Shorthand for actor_sendmodevent $system.player <event name> <string argument> <float argument>
	- parameter 1: string: event: name of the event
	- parameter 2: string: arg: string argument (meaning varies by event sent) (optional: default "")
	- parameter 3: float: arg: float argument (meaning varies by event sent) (optional: default 0.0)

	Example
		util_sendmodevent "IHaveNoIdeaButEventNamesShouldBeEasyToFind" "strarg" 0.0

-=-

util_wait: Wait specified number of seconds i.e. Utility.Wait()

	Example
		util_wait 2.5

	The script will pause processing for 2.5 seconds

-=-

util_waitforkbd: Returns: int: the keycode pressed after waiting for user to press any of the specified keys.
(See https://ck.uesp.net/wiki/Input_Script for the DXScanCodes)
Usage 1: util_waitforkbd <dxscancode> [<dxscancode> ...]
Usage 2: util_waitforkbd $keylist ; where $keylist is a int[]
	- parameter 1: int: dxscancode: <DXScanCode of key>
	- parameter 2: int[]: keylist: a list of dxscancode

	Example
		util_waitforkbd 74 78 181 55
		listadd $keystowaitfor 74 78 181 55
		util_waitforkbd $keystowaitfor

	; These do the same thing

-=-

weather_state: Returns: (varies): Weather related functions based on sub-function

	Example
		weather_state GetClassification

-=-


Weapon:
==============

weapon_doconsumer: For the specified Weapon, perform the requested consumer, provided the appropriate additional parameters
'Consumer' in this case specifically refers to functions that take parameters but return no result
https://ck.uesp.net/wiki/Weapon_Script
	- parameter 1: Form: target Weapon (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: consumer: consumer name

Fire
SetBaseDamage
SetCritDamage
SetReach
SetMinRange
SetMaxRange
SetSpeed
SetStagger
SetWeaponType
SetModelPath
SetIconPath
SetMessageIconPath
SetEnchantment
SetEnchantmentValue
SetEquippedModel
SetEquipType
SetSkill
SetResist
SetCritEffect
SetCritEffectOnDeath
SetCritMultiplier
;;;; will call form_doconsumer if no matches are found

	Example
		set $someWeapon resultfrom form_getbyid $weaponFormID
		weapon_doconsumer $someWeapon SetStagger 5.0 ; huge stagger value

-=-

weapon_dogetter: For the targeted Weapon, set $$ to the result of the specified getter
'Getter' in this case specifically refers to functions that take no parameters but return a value
https://ck.uesp.net/wiki/Weapon_Script
	- parameter 1: Form: target Weapon  (accepts both relative "Skyrim.esm:0xf" and absolute "0xf" values)
	- parameter 2: getter: getter name

GetBaseDamage
GetCritDamage
GetReach
GetMinRange
GetMaxRange
GetSpeed
GetStagger
GetWeaponType
GetModelPath
GetIconPath
GetMessageIconPath
GetEnchantment
GetEnchantmentValue
GetEquippedModel
GetEquipType
GetSkill
GetResist
GetCritEffect
GetCritEffectOnDeath
GetCritMultiplier
IsBattleAxe
IsBow
IsDagger
IsGreatsword
IsMace
IsStaff
IsSword
IsWarhammer
IsWarAxe
;;;; will call form_dogetter if no matches are found

	Example
		set $someWeapon resultfrom form_getbyid $weaponFormID
		weapon_dogetter $someWeapon GetBaseDamage

-=-

